local Services = {
	TweenService = game:GetService("TweenService"),
	UserInputService = game:GetService("UserInputService"),
	RunService = game:GetService("RunService"),
	CoreGui = game:GetService("CoreGui")
}

local Variables = {
	Players = game:GetService("Players"),
	LocalPlayer = game:GetService("Players").LocalPlayer,
	Mouse = game:GetService("Players").LocalPlayer:GetMouse(),
	ViewPort = workspace.CurrentCamera.ViewportSize,
	Camera = workspace.CurrentCamera,
	DynamicSize = nil,
	Stop = false,
	StopForce = false
}

local TweenTypes = {
	Drag = {Enum.EasingStyle.Sine, Enum.EasingDirection.Out},
	Hover = {Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut},
	Click = {Enum.EasingStyle.Back, Enum.EasingDirection.Out}
}

Utilities = {
	Settings = function(Defaults, Options)
		for i, v in pairs(Defaults) do
			Options[i] = Options[i] or v
		end
		return Options
	end,

	Tween = function(Object, Goal, Duration, TweenType, Callback)
		local Tween = Services.TweenService:Create(Object, TweenInfo.new(Duration, TweenType[1], TweenType[2]), Goal)
		Tween:Play()
		if Callback then
			Tween.Completed:Once(Callback)
		end
		return Tween
	end,

	Dragify = function(Frame)
		local Dragging, DragInput, MousePosition, FramePosition
		local UserInputService, Camera = Services.UserInputService, Variables.Camera

		local function _Update(Input)
			local delta = Input.Position - MousePosition
			local newPosition = UDim2.new(FramePosition.X.Scale, FramePosition.X.Offset + delta.X, FramePosition.Y.Scale, FramePosition.Y.Offset + delta.Y)
			Utilities.Tween(Frame, {Position = newPosition}, 0.2, TweenTypes.Drag)
		end

		Frame.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				if not Variables.Stop and not Variables.StopForce then
					Dragging = true
					MousePosition = Input.Position
					FramePosition = Frame.Position

					if UserInputService.TouchEnabled then
						UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
						UserInputService.ModalEnabled = true
						Camera.CameraType = Enum.CameraType.Scriptable
					end

					Input.Changed:Connect(function()
						if Input.UserInputState == Enum.UserInputState.End then
							Dragging = false
							if UserInputService.TouchEnabled then
								UserInputService.MouseBehavior = Enum.MouseBehavior.Default
								UserInputService.ModalEnabled = false
								Camera.CameraType = Enum.CameraType.Custom
							end
						end
					end)
				end
			end
		end)

		Frame.InputChanged:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)

		UserInputService.InputChanged:Connect(function(Input)
			if Input == DragInput and Dragging and not Variables.Stop and not Variables.StopForce then
				_Update(Input)
			end
		end)
	end,

	NewObject = function(Object, Properties)
		local CreatedObject = Instance.new(Object)
		for Property, Setting in pairs(Properties) do
			CreatedObject[Property] = Setting
		end
		return CreatedObject
	end,

	CheckDevice = function()
		Variables.DynamicSize = Services.UserInputService.TouchEnabled and UDim2.new(0, 370, 0, 220) or UDim2.new(0, 470, 0, 320)
		return Services.UserInputService.TouchEnabled
	end,

	CreateCursor = function(Frame, CursorId)
		if not Frame or not CursorId then
			warn("Invalid parameters. Please provide a valid frame and rbxassetid.")
			return
		end

		local Mouse = Variables.LocalPlayer:GetMouse()

		local Cursor = Utilities.NewObject("ImageLabel", {
			Name = "CustomCursor - " .. CursorId,
			Size = UDim2.new(0, 20, 0, 20),
			BackgroundTransparency = 1,
			Image = "rbxassetid://" .. CursorId,
			Parent = Frame
		})


		local UserInputService, RunService = Services.UserInputService, Services.RunService

		RunService.RenderStepped:Connect(function()
			local MouseX, MouseY = Mouse.X, Mouse.Y
			local FramePosition, FrameSize = Frame.AbsolutePosition, Frame.AbsoluteSize

			if MouseX >= FramePosition.X and MouseX <= FramePosition.X + FrameSize.X and
				MouseY >= FramePosition.Y and MouseY <= FramePosition.Y + FrameSize.Y then
				Cursor.Position = UDim2.new(0, MouseX - FramePosition.X - 2, 0, MouseY - FramePosition.Y - 2)
				Cursor.Visible = true
				UserInputService.MouseIconEnabled = false
			else
				Cursor.Visible = false
				UserInputService.MouseIconEnabled = true
			end
		end)
	end,

	SetReSizeable = function(frame, resizeBtn, minSize, maxSize)
		local dragging = false
		local dragInput
		local dragStart
		local startSize
		local startPos

		local function updateInput(Input)
			local delta = Input.Position - dragStart
			local newSize = Vector2.new(
				math.clamp(startSize.X + delta.X, minSize.X, maxSize.X),
				math.clamp(startSize.Y + delta.Y, minSize.Y, maxSize.Y)
			)

			local sizeChange = newSize - startSize
			local positionOffset = sizeChange * 0.5

			Services.RunService.RenderStepped:Wait()
			frame.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
			frame.Position = UDim2.new(
				startPos.X.Scale, startPos.X.Offset + positionOffset.X,
				startPos.Y.Scale, startPos.Y.Offset + positionOffset.Y
			)
		end

		resizeBtn.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				Variables.StopForce = true
				dragStart = Input.Position
				startSize = frame.AbsoluteSize
				startPos = frame.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						dragging = false
						Variables.StopForce = false
					end
				end)
			end
		end)

		Services.UserInputService.InputChanged:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				dragInput = Input
			end
		end)

		Services.RunService.RenderStepped:Connect(function()
			if dragging and dragInput then
				updateInput(dragInput)
				print(Variables.StopForce)
			end
		end)
	end
}

Utilities.CheckDevice()

G_String = ""

coroutine.wrap(function()
	local Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+"
	while true do
		local newString = ""
		for i = 1, math.random(5, 10) do
			local randomIndex = math.random(1, #Chars)
			newString = newString .. Chars:sub(randomIndex, randomIndex)
		end
		G_String = newString
		task.wait(0.2)
	end
end)()

if _G.Running == true then
	game.CoreGui:FindFirstChild(G_String):Destroy()
end

_G.Running = true

Deadzone = {
	Deadzone = Utilities.NewObject("ScreenGui", {
		Parent = Services.RunService:IsStudio() and Variables.LocalPlayer:WaitForChild("PlayerGui") or Services.CoreGui,
		IgnoreGuiInset = true,
		ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
		Name = nil,
		ResetOnSpawn = false,
		ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	})
}

function Deadzone:CreateWindow(Settings)
	Settings = Utilities.Settings({
		Name = "DEADZONE.XYZ",
		Logo = "109685179450185"
	}, Settings or {})

	local Interface = {
		ActiveTab = nil
	}

	do
		Interface.Interface = Utilities.NewObject("Frame", {
			Parent = Deadzone.Deadzone,
			Name = "Interface",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(0, 600, 0, 433),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0)
		})

		Interface.Resize = Utilities.NewObject("Frame", {
			Parent = Interface.Interface,
			Name = "Resize",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			AnchorPoint = Vector2.new(1, 1),
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(1, 0, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			BackgroundTransparency = 1
		})

		Interface.InterfaceCorner = Utilities.NewObject("UICorner", {
			Parent = Interface.Interface,
			Name = "InterfaceCorner",
			CornerRadius = UDim.new(0, 10)
		})

		Interface.InterfaceStroke = Utilities.NewObject("UIStroke", {
			Parent = Interface.Interface,
			Name = "InterfaceStroke",
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Color = Color3.fromRGB(77, 77, 107)
		})

		Interface.NavigationLeft = Utilities.NewObject("Frame", {
			Parent = Interface.Interface,
			Name = "NavigationLeft",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			Size = UDim2.new(0, 144, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0)
		})

		Interface.NavigationCorner = Utilities.NewObject("UICorner", {
			Parent = Interface.NavigationLeft,
			Name = "NavigationCorner",

		})

		Interface.Title = Utilities.NewObject("TextLabel", {
			Parent = Interface.NavigationLeft,
			Name = "Title",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			TextSize = 13,
			FontFace = Font.new("rbxasset://fonts/families/RobotoCondensed.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal),
			TextColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 60),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Text = Settings.Name
		})

		Interface.TitlePadding = Utilities.NewObject("UIPadding", {
			Parent = Interface.Title,
			Name = "TitlePadding",
			PaddingLeft = UDim.new(0, 25)
		})

		Interface.Logo = Utilities.NewObject("ImageLabel", {
			Parent = Interface.Title,
			Name = "Logo",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			AnchorPoint = Vector2.new(0, 0.5),
			Image = "rbxassetid://" .. Settings.Logo,
			Size = UDim2.new(0, 20, 0, 20),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			BackgroundTransparency = 1,
			Position = UDim2.new(0, -9, 0.5, 0)
		})

		Interface.TabButtons = Utilities.NewObject("ScrollingFrame", {
			Parent = Interface.NavigationLeft,
			Name = "TabButtons",
			Active = true,
			BorderSizePixel = 0,
			CanvasSize = UDim2.new(0, 0, 69420, 0),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			Size = UDim2.new(1, 0, 1, -60),
			ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
			Position = UDim2.new(0, 0, 0, 60),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			ScrollBarThickness = 0,
			BackgroundTransparency = 1
		})

		Interface.TabButtonsPadding = Utilities.NewObject("UIPadding", {
			Parent = Interface.TabButtons,
			Name = "TabButtonsPadding",

		})

		Interface.TabButtonsLayout = Utilities.NewObject("UIListLayout", {
			Parent = Interface.TabButtons,
			Name = "TabButtonsLayout",
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			Padding = UDim.new(0, 5),
			SortOrder = Enum.SortOrder.LayoutOrder
		})

		Interface.NavigationTop = Utilities.NewObject("Frame", {
			Parent = Interface.Interface,
			Name = "NavigationTop",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			Size = UDim2.new(1, -144, 0, 60),
			Position = UDim2.new(0, 144, 0, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0)
		})

		Interface.NavigationCorner = Utilities.NewObject("UICorner", {
			Parent = Interface.NavigationTop,
			Name = "NavigationCorner",
		})
	end

	function Interface:CreateTab(Settings)
		Settings = Utilities.Settings({
			Name = "Tab",
			Icon = ""
		}, Settings or {})

		local Tab = {
			Hover = false,
			Active = false,
			ActiveSection = nil
		}

		do
			Tab.TabButton = Utilities.NewObject("TextLabel", {
				Parent = Interface.TabButtons,
				Name = "TabButton",
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(43, 46, 57),
				TextSize = 12,
				FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
				TextColor3 = Color3.fromRGB(181, 191, 204),
				BackgroundTransparency = 1,
				Size = UDim2.new(1, -2, 0, 25),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				Text = Settings.Name
			})

			Tab.TabButtonPadding = Utilities.NewObject("UIPadding", {
				Parent = Tab.TabButton,
				Name = "TabButtonPadding",
				PaddingRight = UDim.new(0, 35)
			})

			Tab.Image = Utilities.NewObject("ImageLabel", {
				Parent = Tab.TabButton,
				Name = "Image",
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				ImageColor3 = Color3.fromRGB(181, 191, 204),
				AnchorPoint = Vector2.new(0, 0.5),
				Image = "rbxassetid://72879628326874",
				Size = UDim2.new(0, 12, 0, 12),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 1,
				Position = UDim2.new(0, 15, 0.5, 0)
			})

			Tab.SectionButtons = Utilities.NewObject("ScrollingFrame", {
				Parent = Interface.NavigationTop,
				Name = "SectionButtons",
				Visible = false,
				Active = true,
				BorderSizePixel = 0,
				CanvasSize = UDim2.new(69420, 0, 0, 0),
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Size = UDim2.new(1, -60, 1, 0),
				ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				ScrollBarThickness = 0,
				BackgroundTransparency = 1
			})

			Tab.SectionArea = Utilities.NewObject("Frame", {
				Parent = Interface.Interface,
				Name = "SectionArea",
				BorderSizePixel = 0,
				Visible = false,
				BackgroundColor3 = Color3.fromRGB(24, 25, 29),
				Size = UDim2.new(1, -144, 1, -60),
				Position = UDim2.new(0, 144, 0, 60),
				BorderColor3 = Color3.fromRGB(0, 0, 0)
			})

			Tab.SectionLayout = Utilities.NewObject("UIListLayout", {
				Parent = Tab.SectionButtons,
				Name = "SectionLayout",
				SortOrder = Enum.SortOrder.LayoutOrder,
				FillDirection = Enum.FillDirection.Horizontal
			})

			Tab.SectionAreaCorner = Utilities.NewObject("UICorner", {
				Parent = Tab.SectionArea,
				Name = "SectionAreaCorner"
			})
		end

		Tab.Logic = {
			Methods = {
				DeactivateTab = function(self)
					if Tab.Active then
						Tab.Active = false
						Utilities.Tween(Tab.TabButton, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.TabButton, {BackgroundTransparency = 1}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {ImageColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.TabButtonPadding, {PaddingRight = UDim.new(0, 35)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {Position = UDim2.new(0, 15, 0.5, 0)}, 0.4, TweenTypes.Click)
						Tab.SectionButtons.Visible = false
						Tab.SectionArea.Visible = false
					end
				end,

				ActivateTab = function(self)
					if not Tab.Active then
						if Interface.ActiveTab and Interface.ActiveTab.Logic and Interface.ActiveTab.Logic.Methods then
							Interface.ActiveTab.Logic.Methods.DeactivateTab()
						end

						Tab.Active = true
						Utilities.Tween(Tab.TabButton, {TextColor3 = Color3.fromRGB(78, 165, 213)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.TabButton, {BackgroundTransparency = 0}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {ImageColor3 = Color3.fromRGB(78, 165, 213)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.TabButtonPadding, {PaddingRight = UDim.new(0, 35)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {Position = UDim2.new(0, 15, 0.5, 0)}, 0.4, TweenTypes.Click)
						Tab.SectionButtons.Visible = true
						Tab.SectionArea.Visible = true
						Interface.ActiveTab = Tab
					end
				end
			},

			Events = {
				MouseEnter = function()
					Tab.Hover = true
					if not Tab.Active then
						Utilities.Tween(Tab.TabButtonPadding, {PaddingRight = UDim.new(0, 25)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {Position = UDim2.new(0, 20, 0.5, 0)}, 0.4, TweenTypes.Click)
					end
				end,

				MouseLeave = function()
					Tab.Hover = false
					if not Tab.Active then
						Utilities.Tween(Tab.TabButtonPadding, {PaddingRight = UDim.new(0, 35)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {Position = UDim2.new(0, 15, 0.5, 0)}, 0.4, TweenTypes.Click)
					end
				end,

				InputBegan = function(Input)
					if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Tab.Hover then
						Tab.Logic.Methods:ActivateTab()
					end
				end
			},

			Setup = function()
				Tab.TabButton.MouseEnter:Connect(Tab.Logic.Events.MouseEnter)
				Tab.TabButton.MouseLeave:Connect(Tab.Logic.Events.MouseLeave)
				Services.UserInputService.InputBegan:Connect(Tab.Logic.Events.InputBegan)

				if Interface.ActiveTab == nil then
					Tab.Logic.Methods:ActivateTab()
				end
			end
		}

		Tab.Logic.Setup()

		function Tab:CreateSection(Settings)
			Settings = Utilities.Settings({
				Name = "SECTION"
			}, Settings or {})

			local Section = {}

			do
				Section.SectionButton = Utilities.NewObject("TextLabel", {
					Parent = Tab.SectionButtons,
					Name = "SectionButton",
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 14,
					FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
					TextColor3 = Color3.fromRGB(181, 191, 204),
					BackgroundTransparency = 1,
					Size = UDim2.new(0, 120, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Text = Settings.Name
				})

				Section.Activated = Utilities.NewObject("Frame", {
					Parent = Section.SectionButton,
					Name = "Activated",
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(78, 165, 213),
					AnchorPoint = Vector2.new(0.5, 1),
					Size = UDim2.new(0, 80, 0, 2),
					Position = UDim2.new(0.5, 0, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Visible = false
				})

				Section.Section = Utilities.NewObject("ScrollingFrame", {
					Parent = Tab.SectionArea,
					Name = "Section",
					Active = true,
					Visible = false,
					BorderSizePixel = 0,
					CanvasSize = UDim2.new(0, 0, 69420, 0),
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					Size = UDim2.new(1, 0, 1, 0),
					ScrollBarImageColor3 = Color3.fromRGB(81, 85, 85),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ScrollBarThickness = 2,
					BackgroundTransparency = 1
				})
			end

			Section.Logic = {
				Methods = {
					DeactivateSection = function(self)
						if Section.Active then
							Section.Active = false
							Utilities.Tween(Section.SectionButton, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Click)
							Section.Section.Visible = false
							Section.Activated.Visible = false
						end
					end,

					ActivateSection = function(self)
						if not Section.Active then
							if Tab.ActiveSection and Tab.ActiveSection.Logic and Tab.ActiveSection.Logic.Methods then
								Tab.ActiveSection.Logic.Methods.DeactivateSection()
							end

							Section.Active = true
							Utilities.Tween(Section.SectionButton, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Click)
							Section.Section.Visible = true
							Section.Activated.Visible = true
							Tab.ActiveSection = Section
						end
					end
				},

				Events = {
					MouseEnter = function()
						Section.Hover = true
						if not Section.Active then
							Utilities.Tween(Section.SectionButton, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Hover)
						end
					end,

					MouseLeave = function()
						Section.Hover = false
						if not Section.Active then
							Utilities.Tween(Section.SectionButton, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Hover)
						end
					end,

					InputBegan = function(Input)
						if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Section.Hover then
							Section.Logic.Methods:ActivateSection()
						end
					end
				},

				Setup = function()
					Section.SectionButton.MouseEnter:Connect(Section.Logic.Events.MouseEnter)
					Section.SectionButton.MouseLeave:Connect(Section.Logic.Events.MouseLeave)
					Services.UserInputService.InputBegan:Connect(Section.Logic.Events.InputBegan)

					if Tab.ActiveSection == nil then
						Section.Logic.Methods:ActivateSection()
					end
				end
			}

			Section.Logic.Setup()

			function Section:CreateGroup(Settings)
				Settings = Utilities.Settings({
					Name = "Group"
				}, Settings or {})

				Section.GroupIndex = (Section.GroupIndex or 0) + 1

				local index = Section.GroupIndex

				local Group = {
					Width = 197,
					SpacingX = 20,
					SpacingY = 20,
					MaxColumns = 2
				}

				do
					Group.Group = Utilities.NewObject("Frame", {
						Parent = Section.Section,
						Name = "Group",
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(18, 20, 24),
						Size = UDim2.new(0, 0, 0, 0),
						Position = UDim2.new(0, 0, 0, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						SelectionGroup = true,
						ClipsDescendants = true
					})

					Group.GroupCorner = Utilities.NewObject("UICorner", {
						Parent = Group.Group,
						Name = "GroupCorner",
						CornerRadius = UDim.new(0, 6)
					})

					Group.GroupPadding = Utilities.NewObject("UIPadding", {
						Parent = Group.Group,
						Name = "GroupPadding",
						PaddingTop = UDim.new(0, 30)
					})

					Group.Seperator = Utilities.NewObject("Frame", {
						Parent = Group.Group,
						Name = "Seperator",
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(27, 31, 36),
						AnchorPoint = Vector2.new(0.5, 0),
						Size = UDim2.new(1, -20, 0, 1),
						Position = UDim2.new(0.5, 0, 0, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0)
					})

					Group.Name = Utilities.NewObject("TextLabel", {
						Parent = Group.Group,
						Name = "TextLabel",
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						TextSize = 14,
						FontFace = Font.new("[[rbxasset://fonts/families/Roboto.json]]", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(49, 51, 53),
						BackgroundTransparency = 1,
						Size = UDim2.new(1, -30, 0, 15),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Settings.Name,
						Position = UDim2.new(0, 15, 0, -20)
					})

					Group.Items = Utilities.NewObject("Frame", {
						Parent = Group.Group,
						Name = "Items",
						Active = true,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						Selectable = true,
						ClipsDescendants = true,
						Size = UDim2.new(1, 0, 1, -10),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						SelectionGroup = true
					})

					Group.ItemsCorner = Utilities.NewObject("UIListLayout", {
						Parent = Group.Items,
						Name = "ItemsCorner",
						Padding = UDim.new(0, 5),
						SortOrder = Enum.SortOrder.LayoutOrder
					})

					Group.ItemsPadding = Utilities.NewObject("UIPadding", {
						Parent = Group.Items,
						Name = "ItemsPadding",
						PaddingTop = UDim.new(0, 10),
						PaddingRight = UDim.new(0, 15),
						PaddingLeft = UDim.new(0, 15),
						PaddingBottom = UDim.new(0, 10)
					})
				end

				Group.Logic = {
					Methods = {
						UpdatePosition = function()
							local column = (index - 1) % Group.MaxColumns
							local row = math.floor((index - 1) / Group.MaxColumns)

							local posX = Group.SpacingX + (Group.Width + Group.SpacingX) * column
							local posY = Group.SpacingY

							for i = 1, index - 1 do
								local prevGroupColumn = (i - 1) % Group.MaxColumns
								if prevGroupColumn == column then
									local prevGroup = Section.Section:FindFirstChild("Group" .. i)
									if prevGroup then
										posY = posY + prevGroup.Size.Y.Offset + Group.SpacingY
									end
								end
							end

							Group.Group.Position = UDim2.new(0, posX, 0, posY)
							Group.Group.Name = "Group" .. index
						end,

						UpdateSize = function()
							local Height = 45
							
							for _, v in pairs(Group.Items:GetChildren()) do
								if v.Name == "Toggle" then
									Height = Height + 25
								elseif v.Name == "Slider" then
									Height = Height + 45
								elseif v.Name == "ColorPicker" then
									Height = Height + 25
								end
							end
							
							Group.Group.Size = UDim2.new(0, Group.Width, 0, Height)
							

							local thisColumn = (index - 1) % Group.MaxColumns

							local columnGroups = {}
							for i = 1, Group.MaxColumns do
								columnGroups[i] = {}
							end

							for i = 1, Section.GroupIndex do
								local group = Section.Section:FindFirstChild("Group" .. i)
								if group then
									local groupColumn = ((i - 1) % Group.MaxColumns) + 1
									table.insert(columnGroups[groupColumn], {index = i, group = group})
								end
							end

							for column, groups in ipairs(columnGroups) do
								local currentY = Group.SpacingY
								for _, groupData in ipairs(groups) do
									local posX = Group.SpacingX + (Group.Width + Group.SpacingX) * (column - 1)
									groupData.group.Position = UDim2.new(0, posX, 0, currentY)
									currentY = currentY + groupData.group.Size.Y.Offset + Group.SpacingY
								end
							end
						end
					},

					Setup = function()
						Group.Logic.Methods.UpdatePosition()
						Group.Logic.Methods.UpdateSize()
					end
				}

				function Group:AddToggle(Settings)
					Settings = Utilities.Settings({
						Name = "Toggle",
						Default = false,
						Callback = function(v)

						end
					}, Settings or {})

					local Toggle = {
						Hover = false,
						MouseDown = false,
						State = Settings.Default
					}

					do
						Toggle.Toggle = Utilities.NewObject("TextLabel", {
							Parent = Group.Items,
							Name = "Toggle",
							BorderSizePixel = 0,
							TextXAlignment = Enum.TextXAlignment.Left,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							TextSize = 14,
							FontFace = Font.new("[[rbxasset://fonts/families/Roboto.json]]", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Color3.fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 20),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Text = Settings.Name
						})

						Toggle.TogglePadding = Utilities.NewObject("UIPadding", {
							Parent = Toggle.Toggle,
							Name = "TogglePadding",
							PaddingLeft = UDim.new(0, 22)
						})

						Toggle.MarkFrame = Utilities.NewObject("Frame", {
							Parent = Toggle.Toggle,
							Name = "MarkFrame",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(78, 165, 213),
							AnchorPoint = Vector2.new(0, 0.5),
							Size = UDim2.new(0, 17, 0, 17),
							Position = UDim2.new(0, -22, 0.5, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0)
						})

						Toggle.MarkFrameCorner = Utilities.NewObject("UICorner", {
							Parent = Toggle.MarkFrame,
							Name = "MarkFrameCorner",
							CornerRadius = UDim.new(0, 6)
						})

						Toggle.Mark = Utilities.NewObject("ImageLabel", {
							Parent = Toggle.MarkFrame,
							Name = "Mark",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							Image = "rbxassetid://123524915704412",
							Size = UDim2.new(1, 0, 1, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							BackgroundTransparency = 1
						})
					end

					Toggle.Logic = {
						Methods = {
							ToggleState = function(self, Bool)
								if Bool == nil then
									Toggle.State = not Toggle.State
								else
									Toggle.State = Bool
								end

								if Toggle.State then
									Utilities.Tween(Toggle.MarkFrame, {BackgroundColor3 = Color3.fromRGB(78, 165, 213)}, 0.4, TweenTypes.Click)
									Utilities.Tween(Toggle.Mark, {ImageTransparency = 0}, 0.4, TweenTypes.Click)
								else
									Utilities.Tween(Toggle.MarkFrame, {BackgroundColor3 = Color3.fromRGB(27, 31, 36)}, 0.4, TweenTypes.Click)
									Utilities.Tween(Toggle.Mark, {ImageTransparency = 1}, 0.4, TweenTypes.Click)
								end

								Settings.Callback(Toggle.State)	
							end,

							InitializeState = function(self)
								self:ToggleState(Settings.Default)
							end
						},

						Events = {
							MouseEnter = function()
								Toggle.Hover = true
							end,

							MouseLeave = function()
								Toggle.Hover = false
							end,

							InputBegan = function(Input)
								if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Toggle.Hover then
									Toggle.MouseDown = true
									Toggle.Logic.Methods.ToggleState()
								end
							end,

							InputEnded = function(Input)
								if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
									Toggle.MouseDown = false
								end
							end
						},

						Setup = function()
							Toggle.Toggle.MouseEnter:Connect(Toggle.Logic.Events.MouseEnter)
							Toggle.Toggle.MouseLeave:Connect(Toggle.Logic.Events.MouseLeave)
							Services.UserInputService.InputBegan:Connect(Toggle.Logic.Events.InputBegan)
							Services.UserInputService.InputEnded:Connect(Toggle.Logic.Events.InputEnded)

							Toggle.Logic.Methods:InitializeState()
							
							Group.Logic.Methods.UpdateSize()
						end
					}		
					
					function Toggle:Set(State)
						Toggle.Logic.Methods.ToggleState(State)
					end

					Toggle.Logic.Setup()

					return Toggle
				end

				function Group:AddSlider(Settings)
					Settings = Utilities.Settings({
						Name = "Slider",
						Min = 0,
						Max = 20,
						Default = 5,
						Increment = 1,
						Callback = function(v)
							print(v)
						end
					}, Settings or {})
					
					local Slider = {
						MouseDown = false,
						Hover = false,
						Connection = nil
					}
					
					do
						Slider.Slider = Utilities.NewObject("TextLabel", {
							Parent = Group.Items,
							Name = "Slider",
							BorderSizePixel = 0,
							TextXAlignment = Enum.TextXAlignment.Left,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							TextSize = 14,
							FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Color3.fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 40),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Text = Settings.Name
						})

						Slider.SliderPadding = Utilities.NewObject("UIPadding", {
							Parent = Slider.Slider,
							Name = "SliderPadding",
							PaddingBottom = UDim.new(0, 20)
						})

						Slider.Background = Utilities.NewObject("Frame", {
							Parent = Slider.Slider,
							Name = "Background",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(27, 31, 36),
							Size = UDim2.new(1, 0, 0, 7),
							Position = UDim2.new(0, 0, 0, 27),
							BorderColor3 = Color3.fromRGB(0, 0, 0)
						})

						Slider.Round = Utilities.NewObject("UICorner", {
							Parent = Slider.Background,
							Name = "Round",
							CornerRadius = UDim.new(0, 200)
						})

						Slider.Filled = Utilities.NewObject("Frame", {
							Parent = Slider.Background,
							Name = "Filled",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(78, 165, 213),
							Size = UDim2.new(0.5, 0, 1, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0)
						})

						Slider.Round = Utilities.NewObject("UICorner", {
							Parent = Slider.Filled,
							Name = "Round",
							CornerRadius = UDim.new(0, 200)
						})

						Slider.Draggable = Utilities.NewObject("Frame", {
							Parent = Slider.Filled,
							Name = "Draggable",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(78, 165, 213),
							AnchorPoint = Vector2.new(0.5, 0.5),
							Size = UDim2.new(0, 11, 0, 11),
							Position = UDim2.new(1, 0, 0.5, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0)
						})

						Slider.Round = Utilities.NewObject("UICorner", {
							Parent = Slider.Draggable,
							Name = "Round",
							CornerRadius = UDim.new(0, 200)
						})

						Slider.UIStroke = Utilities.NewObject("UIStroke", {
							Parent = Slider.Draggable,
							Name = "UIStroke",
							Thickness = 1.5,
							Color = Color3.fromRGB(18, 20, 24)
						})

						Slider.Inner = Utilities.NewObject("Frame", {
							Parent = Slider.Draggable,
							Name = "Inner",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(18, 20, 24),
							AnchorPoint = Vector2.new(0.5, 0.5),
							Size = UDim2.new(0, 5, 0, 5),
							Position = UDim2.new(0.5, 0, 0.5, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0)
						})
						
						Slider.ValueText = Utilities.NewObject("TextLabel", {
							Parent = Slider.Slider,
							BorderSizePixel = 0,
							TextXAlignment = Enum.TextXAlignment.Right,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							AnchorPoint = Vector2.new(1, 0.5),
							TextSize = 14,
							FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Color3.fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 14),
							Position = UDim2.new(1, 0, 0.5, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Text = "0",
							Name = "Value"
						})
					end
					
					Slider.Logic = {
						Methods = {
							GetValue = function(self)
								return Slider.ValueText.Text
							end,
							
							SetValue = function(self, v)
								if v == nil then
									local percentage = math.clamp((Variables.Mouse.X - Slider.Background.AbsolutePosition.X) / Slider.Background.AbsoluteSize.X, 0, 1)
									local value = ((Settings.Max - Settings.Min) * percentage) + Settings.Min
									value = math.round(value / Settings.Increment) * Settings.Increment

									Slider.ValueText.Text = string.format("%.1f", value)
									Utilities.Tween(Slider.Filled, {Size = UDim2.fromScale(percentage, 1)}, 0.4, TweenTypes.Drag)
								else
									local clampedValue = math.clamp(v, Settings.Min, Settings.Max)
									clampedValue = math.round(clampedValue / Settings.Increment) * Settings.Increment
									local percentage = (clampedValue - Settings.Min) / (Settings.Max - Settings.Min)

									Slider.ValueText.Text = string.format("%.1f", clampedValue)
									Utilities.Tween(Slider.Filled, {Size = UDim2.fromScale(percentage, 1)}, 0.4, TweenTypes.Drag)
								end

								Settings.Callback(Slider.Logic.Methods:GetValue())
							end,
							
							Initialize = function(self)
								self:SetValue(Settings.Default)
							end
						},

						Events = {
							MouseEnter = function()
								Slider.Hover = true
							end,

							MouseLeave = function()
								Slider.Hover = false
							end,

							InputBegan = function(Input)
								if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Slider.Hover then
									Variables.Stop = true
									Slider.MouseDown = true
									Utilities.Tween(Slider.Slider, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Hover)

									if not Slider.Connection then
										Slider.Connection = Services.RunService.RenderStepped:Connect(function()
											Slider.Logic.Methods:SetValue()
										end)
									end
								end
							end,

							InputEnded = function(Input)
								if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
									Variables.Stop = false
									Slider.MouseDown = false

									if Slider.Connection then 
										Slider.Connection:Disconnect() 
									end
									Slider.Connection = nil
								end
							end
						},

						Setup = function()
							Slider.Slider.MouseEnter:Connect(Slider.Logic.Events.MouseEnter)
							Slider.Slider.MouseLeave:Connect(Slider.Logic.Events.MouseLeave)
							Services.UserInputService.InputBegan:Connect(Slider.Logic.Events.InputBegan)
							Services.UserInputService.InputEnded:Connect(Slider.Logic.Events.InputEnded)

							Slider.Logic.Methods:Initialize()
							
							Group.Logic.Methods.UpdateSize()
						end
					}

					Slider.Logic.Setup()

					function Slider:GetValue()
						Slider.Logic.Methods.GetValue()
					end

					function Slider:SetValue(value)
						Slider.Logic.Methods.SetValue(self, value)
					end
					
					return Slider
				end
				
				function Group:AddColorPicker(Settings)
					Settings = Utilities.Settings({
						Name = "ColorPicker",
						Default = Color3.fromRGB(255, 0, 0),
						Callback = function(v)
							print(v)
						end    
					}, Settings or {})
					
					local ColorPicker = {
						IsPickingColor = false,
						IsWindowOpen = false,
						CurrentColor = Settings.Default,
						CurrentValue = 1,

						HoverStates = {
							IsHoveringColorWheel = false,
							IsHoveringDarknessSlider = false,
							IsHoveringPreview = false
						}
					}
					
					do
						ColorPicker.ColorPicker = Utilities.NewObject("TextLabel", {
							Parent = Group.Items,
							Name = "ColorPicker",
							BorderSizePixel = 0,
							TextXAlignment = Enum.TextXAlignment.Left,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							TextSize = 14,
							FontFace = Font.new("[[rbxasset://fonts/families/Roboto.json]]", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Color3.fromRGB(255, 255, 255),
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 20),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Text = Settings.Name
						})

						ColorPicker.Color = Utilities.NewObject("Frame", {
							Parent = ColorPicker.ColorPicker,
							Name = "Color",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							AnchorPoint = Vector2.new(1, 0),
							Size = UDim2.new(0, 20, 0, 20),
							Position = UDim2.new(1, 0, 0, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0)
						})

						ColorPicker.ColorCorner = Utilities.NewObject("UICorner", {
							Parent = ColorPicker.Color,
							Name = "ColorCorner",
							CornerRadius = UDim.new(0, 6)
						})
						
						ColorPicker.Window = Utilities.NewObject("Frame", {
							Parent = Interface.Interface,
							Name = "ColorPicker",
							BorderSizePixel = 0,
							AnchorPoint = Vector2.new(0.5, 0.5),
							BackgroundColor3 = Color3.fromRGB(18, 20, 24),
							Size = UDim2.new(0, 143, 0, 120),
							Position = UDim2.new(0, -148, 0, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Visible = false
						})

						ColorPicker.WindowCorner = Utilities.NewObject("UICorner", {
							Parent = ColorPicker.Window,
							Name = "WindowCorner",
							CornerRadius = UDim.new(0, 10)
						})

						ColorPicker.WindowPadding = Utilities.NewObject("UIPadding", {
							Parent = ColorPicker.Window,
							Name = "WindowPadding",
							PaddingTop = UDim.new(0, 5),
							PaddingRight = UDim.new(0, 5),
							PaddingLeft = UDim.new(0, 5),
							PaddingBottom = UDim.new(0, 5)
						})
						
						ColorPicker.ColorPickerStroke = Utilities.NewObject("UIStroke", {
							Parent = ColorPicker.Window,
							Name = "ColorPickerStroke",
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Color = Color3.fromRGB(77, 77, 107)
						})

						ColorPicker.Wheel = Utilities.NewObject("Frame", {
							Parent = ColorPicker.Window,
							Name = "Wheel",
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							Size = UDim2.new(0, 110, 1, 0),
							BorderColor3 = Color3.fromRGB(28, 43, 54),
							BackgroundTransparency = 1
						})

						ColorPicker.ColorWheel = Utilities.NewObject("ImageLabel", {
							Parent = ColorPicker.Window,
							Name = "ColorWheel",
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							Image = "rbxassetid://72583388086348",
							Size = UDim2.new(0, 88, 0, 88),
							BorderColor3 = Color3.fromRGB(28, 43, 54),
							BackgroundTransparency = 1,
							Position = UDim2.new(0, 11, 0, 11)
						})

						ColorPicker.Select = Utilities.NewObject("Frame", {
							Parent = ColorPicker.ColorWheel,
							Name = "Select",
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							AnchorPoint = Vector2.new(0.5, 0.5),
							Size = UDim2.new(0.06, 0, 0.06, 0),
							Position = UDim2.new(0.5, 0, 0.5, 0),
							BorderColor3 = Color3.fromRGB(28, 43, 54),
							BackgroundTransparency = 1
						})

						ColorPicker.SelectCorner = Utilities.NewObject("UICorner", {
							Parent = ColorPicker.Select,
							Name = "SelectCorner",
							CornerRadius = UDim.new(0.5, 0)
						})

						ColorPicker.SelectStroke = Utilities.NewObject("UIStroke", {
							Parent = ColorPicker.Select,
							Name = "SelectStroke",
							Thickness = 2
						})

						ColorPicker.Darkness = Utilities.NewObject("Frame", {
							Parent = ColorPicker.Window,
							Name = "Darkness",
							Active = true,
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							AnchorPoint = Vector2.new(1, 0.5),
							Size = UDim2.new(0, 20, 1, 0),
							Position = UDim2.new(1, 0, 0.5, 0),
							BorderColor3 = Color3.fromRGB(28, 43, 54)
						})

						ColorPicker.DarknessGradient = Utilities.NewObject("UIGradient", {
							Parent = ColorPicker.Darkness,
							Name = "DarknessGradient",
							Rotation = 90,
							Color = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))}
						})

						ColorPicker.DarknessCorner = Utilities.NewObject("UICorner", {
							Parent = ColorPicker.Darkness,
							Name = "DarknessCorner",
							CornerRadius = UDim.new(0, 8)
						})
					end

					ColorPicker.Logic = {
						Methods = {
							ToggleWindow = function()
								ColorPicker.IsWindowOpen = not ColorPicker.IsWindowOpen
								ColorPicker.Window.Visible = ColorPicker.IsWindowOpen
							end,

							GetColorAtPosition = function(MousePosition)
								local Wheel = ColorPicker.ColorWheel
								local WheelAbsPos = Wheel.AbsolutePosition
								local WheelAbsSize = Wheel.AbsoluteSize
								local WheelRadius = (WheelAbsSize.X / 2)
								local WheelCenter = WheelAbsPos + WheelAbsSize / 2

								local Delta = MousePosition - WheelCenter
								local Radius = Delta.Magnitude
								local NormalizedRadius = math.min(Radius / WheelRadius, 1)

								local Angle = math.atan2(Delta.Y, Delta.X)
								local Hue = ((Angle + math.pi) / (2 * math.pi)) % 1
								local Saturation = NormalizedRadius

								return Hue, Saturation
							end,

							UpdateVisuals = function(MousePosition, IsWheel)
								if IsWheel then
									local H, S = ColorPicker.Logic.Methods.GetColorAtPosition(MousePosition)
									local V = ColorPicker.CurrentValue

									local Wheel = ColorPicker.ColorWheel
									local RelativePos = MousePosition - Wheel.AbsolutePosition
									local WheelSize = Wheel.AbsoluteSize

									local CenterX, CenterY = WheelSize.X / 2, WheelSize.Y / 2
									local Angle = math.atan2(RelativePos.Y - CenterY, RelativePos.X - CenterX)
									local Radius = math.min((RelativePos - Vector2.new(CenterX, CenterY)).Magnitude, CenterX)

									local ClampedX = CenterX + Radius * math.cos(Angle)
									local ClampedY = CenterY + Radius * math.sin(Angle)

									ColorPicker.Select.Position = UDim2.new(0, ClampedX, 0, ClampedY)

									local NewColor = Color3.fromHSV(H, S, V)
									ColorPicker.Color.BackgroundColor3 = NewColor
									ColorPicker.CurrentColor = NewColor

									if Settings.Callback then
										Settings.Callback(NewColor)
									end
								end
							end,

							UpdateDarkness = function(MousePosition)
								local Darkness = ColorPicker.Darkness
								local DarknessAbsPos = Darkness.AbsolutePosition
								local DarknessAbsSize = Darkness.AbsoluteSize

								local Value = math.clamp((MousePosition.Y - DarknessAbsPos.Y) / DarknessAbsSize.Y, 0, 1)
								ColorPicker.CurrentValue = 1 - Value

								local H, S = ColorPicker.Logic.Methods.GetColorAtPosition(ColorPicker.Select.AbsolutePosition + ColorPicker.Select.AbsoluteSize / 2)
								local NewColor = Color3.fromHSV(H, S, ColorPicker.CurrentValue)

								ColorPicker.Color.BackgroundColor3 = NewColor
								ColorPicker.CurrentColor = NewColor

								if Settings.Callback then
									Settings.Callback(NewColor)
								end
							end,

							SetColor = function(Color)
								if Color:IsA("Color3") then
									ColorPicker.CurrentColor = Color
									ColorPicker.Color.BackgroundColor3 = Color

									local H, S, V = Color:ToHSV()
									ColorPicker.CurrentValue = V

									local Wheel = ColorPicker.ColorWheel
									local WheelSize = Wheel.AbsoluteSize
									local WheelCenter = WheelSize / 2

									local Angle = H * 2 * math.pi
									local Radius = S * (WheelSize.X / 2)

									local SelectX = WheelCenter.X + Radius * math.cos(Angle)
									local SelectY = WheelCenter.Y + Radius * math.sin(Angle)

									ColorPicker.Select.Position = UDim2.new(0, SelectX, 0, SelectY)

									if Settings.Callback then
										Settings.Callback(Color)
									end
								end
							end,

							GetColor = function()
								return ColorPicker.CurrentColor
							end
						},

						Events = {
							PreviewInputBegan = function(Input)
								if Input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.HoverStates.IsHoveringPreview then
									ColorPicker.Logic.Methods.ToggleWindow()
								end
							end,

							ColorWheelInputBegan = function(Input)
								if Input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.HoverStates.IsHoveringColorWheel then
									ColorPicker.IsPickingColor = true
									ColorPicker.Logic.Methods.UpdateVisuals(Vector2.new(Input.Position.X, Input.Position.Y), true)
								end
							end,

							ColorWheelInputChanged = function(Input)
								if ColorPicker.IsPickingColor and Input.UserInputType == Enum.UserInputType.MouseMovement and ColorPicker.HoverStates.IsHoveringColorWheel then
									ColorPicker.Logic.Methods.UpdateVisuals(Vector2.new(Input.Position.X, Input.Position.Y), true)
									Variables.StopForce = true
								end
							end,

							DarknessInputBegan = function(Input)
								if Input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.HoverStates.IsHoveringDarknessSlider then
									ColorPicker.Logic.IsDraggingDarkness = true
									ColorPicker.Logic.Methods.UpdateDarkness(Vector2.new(Input.Position.X, Input.Position.Y))
								end
							end,

							DarknessInputChanged = function(Input)
								if ColorPicker.Logic.IsDraggingDarkness and Input.UserInputType == Enum.UserInputType.MouseMovement and ColorPicker.HoverStates.IsHoveringDarknessSlider then
									ColorPicker.Logic.Methods.UpdateDarkness(Vector2.new(Input.Position.X, Input.Position.Y))
									Variables.StopForce = true
								end
							end,

							InputEnded = function(Input)
								if Input.UserInputType == Enum.UserInputType.MouseButton1 then
									ColorPicker.IsPickingColor = false
									ColorPicker.Logic.IsDraggingDarkness = false
									Variables.StopForce = false
								end
							end,

							ColorWheelMouseEnter = function()
								ColorPicker.HoverStates.IsHoveringColorWheel = true
							end,

							ColorWheelMouseLeave = function()
								ColorPicker.HoverStates.IsHoveringColorWheel = false
							end,

							DarknessSliderMouseEnter = function()
								ColorPicker.HoverStates.IsHoveringDarknessSlider = true
							end,

							DarknessSliderMouseLeave = function()
								ColorPicker.HoverStates.IsHoveringDarknessSlider = false
							end,

							PreviewMouseEnter = function()
								ColorPicker.HoverStates.IsHoveringPreview = true
							end,

							PreviewMouseLeave = function()
								ColorPicker.HoverStates.IsHoveringPreview = false
							end
						},

						Setup = function()
							Services.UserInputService.InputBegan:Connect(ColorPicker.Logic.Events.PreviewInputBegan)
							Services.UserInputService.InputBegan:Connect(ColorPicker.Logic.Events.ColorWheelInputBegan)
							Services.UserInputService.InputChanged:Connect(ColorPicker.Logic.Events.ColorWheelInputChanged)
							Services.UserInputService.InputBegan:Connect(ColorPicker.Logic.Events.DarknessInputBegan)
							Services.UserInputService.InputChanged:Connect(ColorPicker.Logic.Events.DarknessInputChanged)
							Services.UserInputService.InputEnded:Connect(ColorPicker.Logic.Events.InputEnded)

							ColorPicker.ColorWheel.MouseEnter:Connect(ColorPicker.Logic.Events.ColorWheelMouseEnter)
							ColorPicker.ColorWheel.MouseLeave:Connect(ColorPicker.Logic.Events.ColorWheelMouseLeave)

							ColorPicker.Darkness.MouseEnter:Connect(ColorPicker.Logic.Events.DarknessSliderMouseEnter)
							ColorPicker.Darkness.MouseLeave:Connect(ColorPicker.Logic.Events.DarknessSliderMouseLeave)

							ColorPicker.Color.MouseEnter:Connect(ColorPicker.Logic.Events.PreviewMouseEnter)
							ColorPicker.Color.MouseLeave:Connect(ColorPicker.Logic.Events.PreviewMouseLeave)

							ColorPicker.Window.Position = UDim2.new(0.5, -(Interface.Interface.Size.X.Offset / 2) - (ColorPicker.Window.Size.X.Offset / 2) - 5, 0.5, -(Interface.Interface.Size.Y.Offset / 2) + (ColorPicker.Window.Size.Y.Offset / 2))
							
							Group.Logic.Methods.UpdateSize()
						end,
					}

					ColorPicker.Logic.Setup()

					function ColorPicker:SetColor(Color)
						ColorPicker.Logic.Methods.setColor(Color)
					end

					function ColorPicker:GetColor(Color)
						return ColorPicker.CurrentColor
					end

					Utilities.Dragify(ColorPicker.Window)
					
					return ColorPicker
				end

				Group.Logic.Setup()

				return Group
			end

			return Section
		end

		return Tab
	end

	Utilities.Dragify(Interface.Interface)
	Utilities.SetReSizeable(Interface.Interface, Interface.Resize, Vector2.new(600 / 1.2, 433 / 1.2), Vector2.new(600, 433))

	return Interface
end

function Deadzone:Init()
	coroutine.wrap(function()
		while true do
			if Deadzone and Deadzone.Deadzone then
				Deadzone.Deadzone.Name = G_String
			else
				error("Error: Deadzone.Gui.GUI not found")
			end
			task.wait()
		end
	end)()
end

return Deadzone
