local Services = {
	TweenService = game:GetService("TweenService"),
	UserInputService = game:GetService("UserInputService"),
	RunService = game:GetService("RunService"),
	CoreGui = game:GetService("CoreGui")
}

local Variables = {
	Players = game:GetService("Players"),
	LocalPlayer = game:GetService("Players").LocalPlayer,
	Mouse = game:GetService("Players").LocalPlayer:GetMouse(),
	ViewPort = workspace.CurrentCamera.ViewportSize,
	Camera = workspace.CurrentCamera,
	DynamicSize = nil,
	Stop = false,
	StopForce = false
}

local TweenTypes = {
	Drag = {Enum.EasingStyle.Sine, Enum.EasingDirection.Out},
	Hover = {Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut},
	Click = {Enum.EasingStyle.Back, Enum.EasingDirection.Out}
}

Utilities = {
	Settings = function(Defaults, Options)
		for i, v in pairs(Defaults) do
			Options[i] = Options[i] or v
		end
		return Options
	end,

	Tween = function(Object, Goal, Duration, TweenType, Callback)
		local Tween = Services.TweenService:Create(Object, TweenInfo.new(Duration, TweenType[1], TweenType[2]), Goal)
		Tween:Play()
		if Callback then
			Tween.Completed:Once(Callback)
		end
		return Tween
	end,

	Dragify = function(Frame)
		local Dragging, DragInput, MousePosition, FramePosition
		local UserInputService, Camera = Services.UserInputService, Variables.Camera

		local function _Update(Input)
			local delta = Input.Position - MousePosition
			local newPosition = UDim2.new(FramePosition.X.Scale, FramePosition.X.Offset + delta.X, FramePosition.Y.Scale, FramePosition.Y.Offset + delta.Y)
			Utilities.Tween(Frame, {Position = newPosition}, 0.2, TweenTypes.Drag)
		end

		Frame.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				if not Variables.Stop and not Variables.StopForce then
					Dragging = true
					MousePosition = Input.Position
					FramePosition = Frame.Position

					if UserInputService.TouchEnabled then
						UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
						UserInputService.ModalEnabled = true
						Camera.CameraType = Enum.CameraType.Scriptable
					end

					Input.Changed:Connect(function()
						if Input.UserInputState == Enum.UserInputState.End then
							Dragging = false
							if UserInputService.TouchEnabled then
								UserInputService.MouseBehavior = Enum.MouseBehavior.Default
								UserInputService.ModalEnabled = false
								Camera.CameraType = Enum.CameraType.Custom
							end
						end
					end)
				end
			end
		end)

		Frame.InputChanged:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)

		UserInputService.InputChanged:Connect(function(Input)
			if Input == DragInput and Dragging and not Variables.Stop and not Variables.StopForce then
				_Update(Input)
			end
		end)
	end,

	NewObject = function(Object, Properties)
		local CreatedObject = Instance.new(Object)
		for Property, Setting in pairs(Properties) do
			CreatedObject[Property] = Setting
		end
		return CreatedObject
	end,

	CheckDevice = function()
		Variables.DynamicSize = Services.UserInputService.TouchEnabled and UDim2.new(0, 370, 0, 220) or UDim2.new(0, 470, 0, 320)
		return Services.UserInputService.TouchEnabled
	end,

	CreateCursor = function(Frame, CursorId)
		if not Frame or not CursorId then
			warn("Invalid parameters. Please provide a valid frame and rbxassetid.")
			return
		end

		local Mouse = Variables.LocalPlayer:GetMouse()

		local Cursor = Utilities.NewObject("ImageLabel", {
			Name = "CustomCursor - " .. CursorId,
			Size = UDim2.new(0, 20, 0, 20),
			BackgroundTransparency = 1,
			Image = "rbxassetid://" .. CursorId,
			Parent = Frame
		})


		local UserInputService, RunService = Services.UserInputService, Services.RunService

		RunService.RenderStepped:Connect(function()
			local MouseX, MouseY = Mouse.X, Mouse.Y
			local FramePosition, FrameSize = Frame.AbsolutePosition, Frame.AbsoluteSize

			if MouseX >= FramePosition.X and MouseX <= FramePosition.X + FrameSize.X and
				MouseY >= FramePosition.Y and MouseY <= FramePosition.Y + FrameSize.Y then
				Cursor.Position = UDim2.new(0, MouseX - FramePosition.X - 2, 0, MouseY - FramePosition.Y - 2)
				Cursor.Visible = true
				UserInputService.MouseIconEnabled = false
			else
				Cursor.Visible = false
				UserInputService.MouseIconEnabled = true
			end
		end)
	end,

	SetReSizeable = function(frame, resizeBtn, minSize, maxSize)
		local dragging = false
		local dragInput
		local dragStart
		local startSize
		local startPos

		local function updateInput(Input)
			local delta = Input.Position - dragStart
			local newSize = Vector2.new(
				math.clamp(startSize.X + delta.X, minSize.X, maxSize.X),
				math.clamp(startSize.Y + delta.Y, minSize.Y, maxSize.Y)
			)

			local sizeChange = newSize - startSize
			local positionOffset = sizeChange * 0.5

			Services.RunService.RenderStepped:Wait()
			frame.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
			frame.Position = UDim2.new(
				startPos.X.Scale, startPos.X.Offset + positionOffset.X,
				startPos.Y.Scale, startPos.Y.Offset + positionOffset.Y
			)
		end

		resizeBtn.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				Variables.StopForce = true
				dragStart = Input.Position
				startSize = frame.AbsoluteSize
				startPos = frame.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						dragging = false
						Variables.StopForce = false
					end
				end)
			end
		end)

		Services.UserInputService.InputChanged:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				dragInput = Input
			end
		end)

		Services.RunService.RenderStepped:Connect(function()
			if dragging and dragInput then
				updateInput(dragInput)
				print(Variables.StopForce)
			end
		end)
	end
}

Utilities.CheckDevice()

G_String = ""

coroutine.wrap(function()
	local Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+"
	while true do
		local newString = ""
		for i = 1, math.random(5, 10) do
			local randomIndex = math.random(1, #Chars)
			newString = newString .. Chars:sub(randomIndex, randomIndex)
		end
		G_String = newString
		task.wait(0.2)
	end
end)()

if _G.Running == true then
	game.CoreGui:FindFirstChild(G_String):Destroy()
end

_G.Running = true

Deadzone = {}

Deadzone.gui = {
	DeadzoneXYZ = Utilities.NewObject("ScreenGui", {
		Parent = Services.RunService:IsStudio() and Variables.LocalPlayer:WaitForChild("PlayerGui") or Services.CoreGui,
		IgnoreGuiInset = true,
		ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
		Name = nil,
		ResetOnSpawn = false
	})
}

function Deadzone:CreateWindow(Settings)
	Settings = Utilities.Settings({
		Name = "DEADZONE.XYZ",
		Logo = "109685179450185"
	}, Settings or {})
	
	Interface = {
		ActiveTab = nil
	}
	
	do
		Interface.MainFrame = Utilities.NewObject("Frame", {
			Parent = nil,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(24, 25, 29),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(0, 584, 0, 396),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "Interface"
		})
		
		Interface.InterfaceCorner = Utilities.NewObject("UICorner", {
			Parent = Interface.MainFrame,
			Name = "InterfaceCorner",
			CornerRadius = UDim.new(0, 4)
		})

		Interface.InterfaceStroke = Utilities.NewObject("UIStroke", {
			Parent = Interface.MainFrame,
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Name = "InterfaceStroke",
			Color = Color3.fromRGB(77, 77, 107)
		})

		Interface.NavigationLeft = Utilities.NewObject("Frame", {
			Parent = Interface.MainFrame,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			Size = UDim2.new(0, 144, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "NavigationLeft"
		})

		Interface.NavigationCorner = Utilities.NewObject("UICorner", {
			Parent = Interface.NavigationLeft,
			Name = "NavigationCorner",
			CornerRadius = UDim.new(0, 4)
		})

		Interface.Title = Utilities.NewObject("TextLabel", {
			Parent = Interface.NavigationLeft,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			TextSize = 13,
			FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
			TextColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 60),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Text = Settings.Name,
			Name = "Title"
		})

		Interface.TitlePadding = Utilities.NewObject("UIPadding", {
			Parent = Interface.Title,
			Name = "TitlePadding",
			PaddingLeft = UDim.new(0, 25)
		})

		Interface.Logo = Utilities.NewObject("ImageLabel", {
			Parent = Interface.Title,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			AnchorPoint = Vector2.new(0, 0.5),
			Image = "rbxassetid://" .. Settings.Logo,
			Size = UDim2.new(0, 20, 0, 20),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			BackgroundTransparency = 1,
			Name = "Logo",
			Position = UDim2.new(0, -9, 0.5, 0)
		})

		Interface.TabButtons = Utilities.NewObject("ScrollingFrame", {
			Parent = Interface.NavigationLeft,
			Active = true,
			BorderSizePixel = 0,
			CanvasSize = UDim2.new(0, 0, 69420, 0),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			Name = "TabButtons",
			Size = UDim2.new(1, 0, 1, -60),
			ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
			Position = UDim2.new(0, 0, 0, 60),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			ScrollBarThickness = 0,
			BackgroundTransparency = 1
		})
		
		Interface.NavigationTop = Utilities.NewObject("Frame", {
			Parent = Interface.MainFrame,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			Size = UDim2.new(1, -144, 0, 60),
			Position = UDim2.new(0, 144, 0, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "NavigationTop"
		})

		Interface.NavigationCorner = Utilities.NewObject("UICorner", {
			Parent = Interface.NavigationTop,
			Name = "NavigationCorner",
			CornerRadius = UDim.new(0, 4)
		})

		Interface.SeperatorLeft = Utilities.NewObject("Frame", {
			Parent = Interface.NavigationTop,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			Size = UDim2.new(0, 5, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "SeperatorLeft"
		})

		Interface.SeperatorBottom = Utilities.NewObject("Frame", {
			Parent = Interface.NavigationTop,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(18, 20, 24),
			AnchorPoint = Vector2.new(0, 1),
			Size = UDim2.new(1, 0, 0, 5),
			Position = UDim2.new(0, 0, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "SeperatorBottom"
		})

		Interface.Resize = Utilities.NewObject("Frame", {
			Parent = Interface.MainFrame,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			AnchorPoint = Vector2.new(1, 1),
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(1, 0, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "Resize",
			BackgroundTransparency = 1
		})
		
		Interface.TabButtonsPadding = Utilities.NewObject("UIPadding", {
			Parent = Interface.TabButtons,
			Name = "TabButtonsPadding"
		})

		Interface.TabButtonsLayout = Utilities.NewObject("UIListLayout", {
			Parent = Interface.TabButtons,
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			Padding = UDim.new(0, 5),
			SortOrder = Enum.SortOrder.LayoutOrder,
			Name = "TabButtonsLayout"
		})
	end
	
	function Interface:CreateTab(Settings)
		Settings = Utilities.Settings({
			Name = "Tab",
			Image = "72879628326874"
		}, Settings or {})
		
		local Tab = {
			Hover = false,
			Active = false,
			ActiveSection = nil
		}
		
		do
			Tab.Button = Utilities.NewObject("TextLabel", {
				Parent = Interface.TabButtons,
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(43, 46, 57),
				TextSize = 12,
				FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
				TextColor3 = Color3.fromRGB(181, 191, 204),
				BackgroundTransparency = 1,
				Size = UDim2.new(1, -2, 0, 25),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				Text = Settings.Name,
				Name = "TabButton"
			})

			Tab.TabButtonPadding = Utilities.NewObject("UIPadding", {
				Parent = Tab.Button,
				PaddingRight = UDim.new(0, 35),
				Name = "TabButtonPadding"
			})

			Tab.Image = Utilities.NewObject("ImageLabel", {
				Parent = Tab.Button,
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				ImageColor3 = Color3.fromRGB(181, 191, 204),
				AnchorPoint = Vector2.new(0, 0.5),
				Image = "rbxassetid://" .. Settings.Image,
				Size = UDim2.new(0, 12, 0, 12),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 1,
				Name = "Image",
				Position = UDim2.new(0, 15, 0.5, 0)
			})
			
			
			
			Tab.SectionButtons = Utilities.NewObject("ScrollingFrame", {
				Parent = Interface.NavigationTop,
				Visible = false,
				BorderSizePixel = 0,
				CanvasSize = UDim2.new(69420, 0, 0, 0),
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Name = "SectionButtons",
				Size = UDim2.new(1, -60, 1, 0),
				ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				ScrollBarThickness = 0,
				BackgroundTransparency = 1
			})

			Tab.Layout = Utilities.NewObject("UIListLayout", {
				Parent = Tab.SectionButtons,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Name = "SectionLayout",
				FillDirection = Enum.FillDirection.Horizontal
			})
			
			Tab.SectionArea = Utilities.NewObject("Frame", {
				Parent = Interface.MainFrame,
				Visible = false,
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Size = UDim2.new(1, -144, 1, -60),
				Position = UDim2.new(0, 144, 0, 60),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				Name = "SectionArea",
				BackgroundTransparency = 1
			})
		end
		
		Tab.Logic = {
			Methods = {
				DeactivateTab = function(self)
					if Tab.Active then
						Tab.Active = false
						Utilities.Tween(Tab.Button, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Button, {BackgroundTransparency = 1}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {ImageColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Click)
						Tab.SectionButtons.Visible = false
						Tab.SectionArea.Visible = false
					end
				end,

				ActivateTab = function(self)
					if not Tab.Active then
						if Interface.ActiveTab and Interface.ActiveTab.Logic and Interface.ActiveTab.Logic.Methods then
							Interface.ActiveTab.Logic.Methods.DeactivateTab()
						end

						Tab.Active = true
						Utilities.Tween(Tab.Button, {TextColor3 = Color3.fromRGB(78, 165, 213)}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Button, {BackgroundTransparency = 0}, 0.4, TweenTypes.Click)
						Utilities.Tween(Tab.Image, {ImageColor3 = Color3.fromRGB(78, 165, 213)}, 0.4, TweenTypes.Click)
						Tab.SectionButtons.Visible = true
						Tab.SectionArea.Visible = true
						Interface.ActiveTab = Tab
					end
				end
			},

			Events = {
				MouseEnter = function()
					Tab.Hover = true
					if not Tab.Active then
						Utilities.Tween(Tab.Button, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Hover)
						Utilities.Tween(Tab.Button, {BackgroundTransparency = 0.7}, 0.4, TweenTypes.Hover)
						Utilities.Tween(Tab.Image, {ImageColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Hover)
					end
				end,

				MouseLeave = function()
					Tab.Hover = false
					if not Tab.Active then
						Utilities.Tween(Tab.Button, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Hover)
						Utilities.Tween(Tab.Button, {BackgroundTransparency = 1}, 0.4, TweenTypes.Hover)
						Utilities.Tween(Tab.Image, {ImageColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Hover)
					end
				end,

				InputBegan = function(Input)
					if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Tab.Hover then
						Tab.Logic.Methods:ActivateTab()
					end
				end
			},

			Setup = function()
				Tab.Button.MouseEnter:Connect(Tab.Logic.Events.MouseEnter)
				Tab.Button.MouseLeave:Connect(Tab.Logic.Events.MouseLeave)
				Services.UserInputService.InputBegan:Connect(Tab.Logic.Events.InputBegan)

				if Interface.ActiveTab == nil then
					Tab.Logic.Methods:ActivateTab()
				end
			end
		}

		Tab.Logic.Setup()
		
		function Tab:CreateSection(Settings)
			Settings = Utilities.Settings({
				Name = "SECTION"
			}, Settings or {})
			
			local Section = {
				Active = false,
				Hover = false
			}
			
			do
				Section.Button = Utilities.NewObject("TextLabel", {
					Parent = Tab.SectionButtons,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 14,
					FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
					TextColor3 = Color3.fromRGB(181, 191, 204),
					BackgroundTransparency = 1,
					Size = UDim2.new(0, 120, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Text = Settings.Name,
					Name = "SectionButton"
				})

				Section.Activated = Utilities.NewObject("Frame", {
					Parent = Section.Button,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(78, 165, 213),
					AnchorPoint = Vector2.new(0.5, 1),
					Size = UDim2.new(0, 80, 0, 0),
					Position = UDim2.new(0.5, 0, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Activated",
				})
				
				Section.Section = Utilities.NewObject("Frame", {
					Parent = Tab.SectionArea,
					Visible = false,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					Selectable = true,
					ClipsDescendants = true,
					Size = UDim2.new(1, 0, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Section",
					BackgroundTransparency = 1,
					SelectionGroup = true
				})
				
				Section.Elements = Utilities.NewObject("Frame", {
					Parent = Section.Section,
					Visible = false,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(18, 20, 24),
					Name = "Elements",
					Size = UDim2.new(1, -30, 1, -30),
					Position = UDim2.new(0, 15, 0, 15),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
				})

				Section.Holder = Utilities.NewObject("ScrollingFrame", {
					Parent = Section.Elements,
					BorderSizePixel = 0,
					CanvasSize = UDim2.new(0, 0, 69420, 0),
					BackgroundColor3 = Color3.fromRGB(18, 20, 24),
					Name = "Elements",
					Selectable = false,
					BackgroundTransparency = 1,
					ClipsDescendants = false,
					Size = UDim2.new(1, 0, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ScrollBarThickness = 0
				})

				Section.HolderPadding = Utilities.NewObject("UIPadding", {
					Parent = Section.Holder,
					PaddingTop = UDim.new(0, 10),
					PaddingRight = UDim.new(0, 10),
					Name = "ElementsPadding",
					PaddingLeft = UDim.new(0, 10),
					PaddingBottom = UDim.new(0, 10)
				})

				Section.HolderLayout = Utilities.NewObject("UIListLayout", {
					Parent = Section.Holder,
					Padding = UDim.new(0, 5),
					SortOrder = Enum.SortOrder.LayoutOrder,
					Name = "ElementsLayout"
				})

				Section.ElementsCorner = Utilities.NewObject("UICorner", {
					Parent = Section.Elements,
					Name = "InterfaceCorner",
					CornerRadius = UDim.new(0, 3)
				})
			end
			
			Section.Logic = {
				Methods = {
					DeactivateSection = function(self)
						if Section.Active then
							Section.Active = false
							Utilities.Tween(Section.Button, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Click)
							Utilities.Tween(Section.Activated, {Size = UDim2.new(0, 80, 0, 0)}, 0.4, TweenTypes.Click)
							Section.Section.Visible = false
							Section.Elements.Visible = false
						end
					end,

					ActivateSection = function(self)
						if not Section.Active then
							if Tab.ActiveSection and Tab.ActiveSection.Logic and Tab.ActiveSection.Logic.Methods then
								Tab.ActiveSection.Logic.Methods.DeactivateSection()
							end

							Section.Active = true
							Utilities.Tween(Section.Button, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Click)
							Utilities.Tween(Section.Activated, {Size = UDim2.new(0, 80, 0, 2)}, 0.4, TweenTypes.Click)
							Section.Section.Visible = true
							Section.Elements.Visible = true
							Tab.ActiveSection = Section
						end
					end
				},
				
				Events = {
					MouseEnter = function()
						Section.Hover = true
						if not Section.Active then
							Utilities.Tween(Section.Button, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Hover)
						end
					end,

					MouseLeave = function()
						Section.Hover = false
						if not Section.Active then
							Utilities.Tween(Section.Button, {TextColor3 = Color3.fromRGB(181, 191, 204)}, 0.4, TweenTypes.Hover)
						end
					end,

					InputBegan = function(Input)
						if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Section.Hover then
							Section.Logic.Methods:ActivateSection()
						end
					end
				},

				Setup = function()
					Section.Button.MouseEnter:Connect(Section.Logic.Events.MouseEnter)
					Section.Button.MouseLeave:Connect(Section.Logic.Events.MouseLeave)
					Services.UserInputService.InputBegan:Connect(Section.Logic.Events.InputBegan)

					if Tab.ActiveSection == nil then
						Section.Logic.Methods:ActivateSection()
					end
				end
			}
			
			Section.Logic.Setup()
			
			function Section:AddToggle(Settings)
				Settings = Utilities.Settings({
					Name = "Toggle",
					Default = false,
					Callback = function(v)
						
					end
				}, Settings or {})
				
				local Toggle = {
					Hover = false,
					MouseDown = false,
					State = Settings.Default
				}
				
				do
					Toggle.Label = Utilities.NewObject("TextLabel", {
						Parent = Section.Holder,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						TextSize = 14,
						FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(255, 255, 255),
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 0, 20),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Settings.Name,
						Name = "Toggle"
					})

					Toggle.Padding = Utilities.NewObject("UIPadding", {
						Parent = Toggle.Label,
						Name = "TogglePadding",
						PaddingLeft = UDim.new(0, 22)
					})

					Toggle.MarkFrame = Utilities.NewObject("Frame", {
						Parent = Toggle.Label,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(27, 31, 36),
						AnchorPoint = Vector2.new(0, 0.5),
						Size = UDim2.new(0, 17, 0, 17),
						Position = UDim2.new(0, -22, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "MarkFrame"
					})

					Toggle.MarkFrameCorner = Utilities.NewObject("UICorner", {
						Parent = Toggle.MarkFrame,
						Name = "MarkFrameCorner",
						CornerRadius = UDim.new(0, 6)
					})

					Toggle.Mark = Utilities.NewObject("ImageLabel", {
						Parent = Toggle.MarkFrame,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						ImageTransparency = 1,
						Image = "rbxassetid://123524915704412",
						Size = UDim2.new(1, 0, 1, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Name = "Mark"
					})
				end
				
				Toggle.Logic = {
					Methods = {
						ToggleState = function(self, Bool)
							if Bool == nil then
								Toggle.State = not Toggle.State
							else
								Toggle.State = Bool
							end

							if Toggle.State then
								Utilities.Tween(Toggle.MarkFrame, {BackgroundColor3 = Color3.fromRGB(78, 165, 213)}, 0.4, TweenTypes.Click)
								Utilities.Tween(Toggle.Mark, {ImageTransparency = 0}, 0.4, TweenTypes.Click)
							else
								Utilities.Tween(Toggle.MarkFrame, {BackgroundColor3 = Color3.fromRGB(27, 31, 36)}, 0.4, TweenTypes.Click)
								Utilities.Tween(Toggle.Mark, {ImageTransparency = 1}, 0.4, TweenTypes.Click)
							end

							Settings.Callback(Toggle.State)	
						end,

						InitializeState = function(self)
							self:ToggleState(Settings.Default)
						end
					},
					
					Events = {
						MouseEnter = function()
							Toggle.Hover = true
						end,

						MouseLeave = function()
							Toggle.Hover = false
						end,

						InputBegan = function(Input)
							if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Toggle.Hover then
								Toggle.MouseDown = true
								Toggle.Logic.Methods.ToggleState()
							end
						end,

						InputEnded = function(Input)
							if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
								Toggle.MouseDown = false
							end
						end
					},
					
					Setup = function()
						Toggle.Label.MouseEnter:Connect(Toggle.Logic.Events.MouseEnter)
						Toggle.Label.MouseLeave:Connect(Toggle.Logic.Events.MouseLeave)
						Services.UserInputService.InputBegan:Connect(Toggle.Logic.Events.InputBegan)
						Services.UserInputService.InputEnded:Connect(Toggle.Logic.Events.InputEnded)

						Toggle.Logic.Methods:InitializeState()
					end
				}			
				
				Toggle.Logic.Setup()
				
				return Toggle
			end
			
			function Section:AddSlider(Settings)
				Settings = Utilities.Settings({
					Name = "Slider",
					Min = 0,
					Max = 20,
					Default = 5,
					Increment = 1,
					Callback = function(v)
						print(v)
					end
				}, Settings or {})

				local Slider = {
					MouseDown = false,
					Hover = false,
					Connection = nil
				}

				do
					Slider.Label = Utilities.NewObject("TextLabel", {
						Parent = Section.Holder,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						TextSize = 14,
						FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(255, 255, 255),
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 0, 40),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Settings.Name,
						Name = "Slider"
					})
					
					Slider.ValueText = Utilities.NewObject("TextLabel", {
						Parent = Slider.Label,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Right,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						AnchorPoint = Vector2.new(1, 0.5),
						TextSize = 14,
						FontFace = Font.new("rbxasset://fonts/families/Roboto.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(255, 255, 255),
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 0, 14),
						Position = UDim2.new(1, 0, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = "0",
						Name = "Value"
					})

					Slider.Padding = Utilities.NewObject("UIPadding", {
						Parent = Slider.Label,
						Name = "SliderPadding",
						PaddingBottom = UDim.new(0, 20)
					})

					Slider.Background = Utilities.NewObject("Frame", {
						Parent = Slider.Label,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(27, 31, 36),
						Size = UDim2.new(1, 0, 0, 7),
						Position = UDim2.new(0, 0, 0, 27),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "Background"
					})

					Slider.BackgroundCorner = Utilities.NewObject("UICorner", {
						Parent = Slider.Background,
						Name = "Round",
						CornerRadius = UDim.new(0, 200)
					})

					Slider.BackgroundFilled = Utilities.NewObject("Frame", {
						Parent = Slider.Background,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(78, 165, 213),
						Size = UDim2.new(0.5, 0, 1, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "Filled"
					})

					Slider.BackgroundFilledCorner = Utilities.NewObject("UICorner", {
						Parent = Slider.BackgroundFilled,
						Name = "Round",
						CornerRadius = UDim.new(0, 200)
					})

					Slider.BackgroundFilledDraggable = Utilities.NewObject("Frame", {
						Parent = Slider.BackgroundFilled,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(78, 165, 213),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Size = UDim2.new(0, 11, 0, 11),
						Position = UDim2.new(1, 0, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "Draggable"
					})

					Slider.BackgroundFilledDraggableCorner = Utilities.NewObject("UICorner", {
						Parent = Slider.BackgroundFilledDraggable,
						Name = "Round",
						CornerRadius = UDim.new(0, 200)
					})

					Slider.BackgroundFilledDraggableStroke = Utilities.NewObject("UIStroke", {
						Parent = Slider.BackgroundFilledDraggable,
						Thickness = 1.5,
						Color = Color3.fromRGB(18, 20, 24)
					})

					Slider.BackgroundFilledDraggableInner = Utilities.NewObject("Frame", {
						Parent = Slider.BackgroundFilledDraggable,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(18, 20, 24),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Size = UDim2.new(0, 5, 0, 5),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "Inner"
					})
				end
				
				Slider.Logic = {
					Methods = {
						SetValue = function(self, v)
							if v == nil then
								local percentage = math.clamp((Variables.Mouse.X - Slider.Background.AbsolutePosition.X) / Slider.Background.AbsoluteSize.X, 0, 1)
								local value = ((Settings.Max - Settings.Min) * percentage) + Settings.Min
								value = math.round(value / Settings.Increment) * Settings.Increment

								Slider.ValueText.Text = string.format("%.1f", value)
								Utilities.Tween(Slider.BackgroundFilled, {Size = UDim2.fromScale(percentage, 1)}, 0.4, TweenTypes.Drag)
							else
								local clampedValue = math.clamp(v, Settings.Min, Settings.Max)
								clampedValue = math.round(clampedValue / Settings.Increment) * Settings.Increment
								local percentage = (clampedValue - Settings.Min) / (Settings.Max - Settings.Min)

								Slider.ValueText.Text = string.format("%.1f", clampedValue)
								Utilities.Tween(Slider.BackgroundFilled, {Size = UDim2.fromScale(percentage, 1)}, 0.4, TweenTypes.Drag)
							end

							Settings.Callback(Slider.Logic.Methods:GetValue())
						end,

						GetValue = function(self)
							return tonumber(Slider.Label.Text)
						end,

						Initialize = function(self)
							self:SetValue(Settings.Default)
						end
					},

					Events = {
						MouseEnter = function()
							Slider.Hover = true
						end,

						MouseLeave = function()
							Slider.Hover = false
						end,

						InputBegan = function(Input)
							if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Slider.Hover then
								Variables.Stop = true
								Slider.MouseDown = true
								Utilities.Tween(Slider.Label, {TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.4, TweenTypes.Hover)

								if not Slider.Connection then
									Slider.Connection = Services.RunService.RenderStepped:Connect(function()
										Slider.Logic.Methods:SetValue()
									end)
								end
							end
						end,

						InputEnded = function(Input)
							if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
								Variables.Stop = false
								Slider.MouseDown = false

								if Slider.Connection then 
									Slider.Connection:Disconnect() 
								end
								Slider.Connection = nil
							end
						end
					},

					Setup = function()
						Slider.Label.MouseEnter:Connect(Slider.Logic.Events.MouseEnter)
						Slider.Label.MouseLeave:Connect(Slider.Logic.Events.MouseLeave)
						Services.UserInputService.InputBegan:Connect(Slider.Logic.Events.InputBegan)
						Services.UserInputService.InputEnded:Connect(Slider.Logic.Events.InputEnded)

						Slider.Logic.Methods:Initialize()
					end
				}

				Slider.Logic.Setup()
				
				function Slider:GetValue()
					Slider.Logic.Methods.GetValue()
				end
				
				function Slider:SetValue(value)
					Slider.Logic.Methods.SetValue(self, value)
				end
				
				return Slider
			end
			
			function Section:AddColorPicker(Settings)
				Settings = Utilities.Settings({
					Name = "FOV Circle Color",
					Default = Color3.fromRGB(255, 0, 0),
					Callback = function(v)
						print(v)
					end    
				}, Settings or {})

				ColorPicker = {
					IsPickingColor = false,
					IsWindowOpen = false,
					CurrentColor = Settings.Default,
					CurrentValue = 1,
					
					HoverStates = {
						IsHoveringColorWheel = false,
						IsHoveringDarknessSlider = false,
						IsHoveringPreview = false
					}
				}

				do
					ColorPicker.Label = Utilities.NewObject("TextLabel", {
						Parent = Section.Holder,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						BackgroundTransparency = 1,
						TextSize = 14,
						FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(255, 255, 255),
						Size = UDim2.new(1, 0, 0, 20),
						Text = Settings.Name,
						Name = [[ColorPickerLabel]]
					})

					ColorPicker.Preview = Utilities.NewObject("Frame", {
						Parent = ColorPicker.Label,
						BorderSizePixel = 0,
						BackgroundColor3 = Settings.Default,
						AnchorPoint = Vector2.new(1, 0),
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, 0, 0, 0),
						Name = [[ColorPreview]]
					})

					Utilities.NewObject("UICorner", {
						Parent = ColorPicker.Preview,
						CornerRadius = UDim.new(0, 4)
					})

					ColorPicker.Window = Utilities.NewObject("Frame", {
						Parent = Deadzone.gui.DeadzoneXYZ,
						BorderSizePixel = 0,
						AnchorPoint = Vector2.new(0.5, 0.5),
						BackgroundColor3 = Color3.fromRGB(18, 20, 24),
						Size = UDim2.new(0, 120, 0, 140),
						Position = UDim2.new(0, 0, 0, 0),
						Visible = false,
						Name = "ColorPickerWindow"
					})

					Utilities.NewObject("UICorner", {
						Parent = ColorPicker.Window,
						CornerRadius = UDim.new(0, 4)
					})

					ColorPicker.ColorWheel = Utilities.NewObject("ImageLabel", {
						Parent = ColorPicker.Window,
						BackgroundTransparency = 1,
						Image = "rbxassetid://72583388086348",
						Size = UDim2.new(0, 88, 0, 88),
						Position = UDim2.new(0.5, 0, 0, 10),
						AnchorPoint = Vector2.new(0.5, 0),
						Name = "ColorWheel",
					})

					ColorPicker.Select = Utilities.NewObject("Frame", {
						Parent = ColorPicker.ColorWheel,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Size = UDim2.new(0, 4, 0, 4),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						Name = "Select"
					})

					Utilities.NewObject("UICorner", {
						Parent = ColorPicker.Select,
						CornerRadius = UDim.new(1, 0)
					})

					ColorPicker.Darkness = Utilities.NewObject("Frame", {
						Parent = ColorPicker.Window,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						AnchorPoint = Vector2.new(0.5, 1),
						Size = UDim2.new(1, -20, 0, 20),
						Position = UDim2.new(0.5, 0, 1, -10),
						Name = "Darkness"
					})

					Utilities.NewObject("UIGradient", {
						Parent = ColorPicker.Darkness,
						Color = ColorSequence.new({
							ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
							ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
						})
					})

					Utilities.NewObject("UICorner", {
						Parent = ColorPicker.Darkness,
						CornerRadius = UDim.new(0, 4)
					})
				end

				ColorPicker.Logic = {
					Methods = {
						toggleWindow = function()
							ColorPicker.IsWindowOpen = not ColorPicker.IsWindowOpen
							ColorPicker.Window.Visible = ColorPicker.IsWindowOpen
						end,

						getColorAtPosition = function(mousePosition)
							local wheel = ColorPicker.ColorWheel
							local wheelAbsPos = wheel.AbsolutePosition
							local wheelAbsSize = wheel.AbsoluteSize
							local wheelRadius = (wheelAbsSize.X / 2)
							local wheelCenter = wheelAbsPos + wheelAbsSize / 2

							local delta = mousePosition - wheelCenter
							local radius = delta.Magnitude
							local normalizedRadius = math.min(radius / wheelRadius, 1)

							local angle = math.atan2(delta.Y, delta.X)
							local hue = ((angle + math.pi) / (2 * math.pi)) % 1
							local saturation = normalizedRadius

							return hue, saturation
						end,

						updateVisuals = function(mousePosition, isWheel)
							if isWheel then
								local h, s = ColorPicker.Logic.Methods.getColorAtPosition(mousePosition)
								local v = ColorPicker.CurrentValue

								local wheel = ColorPicker.ColorWheel
								local relativePos = mousePosition - wheel.AbsolutePosition
								local wheelSize = wheel.AbsoluteSize

								local centerX, centerY = wheelSize.X / 2, wheelSize.Y / 2
								local angle = math.atan2(relativePos.Y - centerY, relativePos.X - centerX)
								local radius = math.min((relativePos - Vector2.new(centerX, centerY)).Magnitude, centerX)

								local clampedX = centerX + radius * math.cos(angle)
								local clampedY = centerY + radius * math.sin(angle)

								ColorPicker.Select.Position = UDim2.new(0, clampedX, 0, clampedY)

								local newColor = Color3.fromHSV(h, s, v)
								ColorPicker.Preview.BackgroundColor3 = newColor
								ColorPicker.CurrentColor = newColor

								if Settings.Callback then
									Settings.Callback(newColor)
								end
							end
						end,

						updateDarkness = function(mousePosition)
							local darkness = ColorPicker.Darkness
							local darknessAbsPos = darkness.AbsolutePosition
							local darknessAbsSize = darkness.AbsoluteSize

							local value = math.clamp((mousePosition.X - darknessAbsPos.X) / darknessAbsSize.X, 0, 1)
							ColorPicker.CurrentValue = 1 - value

							local h, s = ColorPicker.Logic.Methods.getColorAtPosition(ColorPicker.Select.AbsolutePosition + ColorPicker.Select.AbsoluteSize / 2)
							local newColor = Color3.fromHSV(h, s, ColorPicker.CurrentValue)

							ColorPicker.Preview.BackgroundColor3 = newColor
							ColorPicker.CurrentColor = newColor

							if Settings.Callback then
								Settings.Callback(newColor)
							end
						end,

						setColor = function(color)
							if color:IsA("Color3") then
								ColorPicker.CurrentColor = color
								ColorPicker.Preview.BackgroundColor3 = color

								local h, s, v = color:ToHSV()
								ColorPicker.CurrentValue = v

								local wheel = ColorPicker.ColorWheel
								local wheelSize = wheel.AbsoluteSize
								local wheelCenter = wheelSize / 2

								local angle = h * 2 * math.pi
								local radius = s * (wheelSize.X / 2)

								local selectX = wheelCenter.X + radius * math.cos(angle)
								local selectY = wheelCenter.Y + radius * math.sin(angle)

								ColorPicker.Select.Position = UDim2.new(0, selectX, 0, selectY)

								if Settings.Callback then
									Settings.Callback(color)
								end
							end
						end,

						getColor = function()
							return ColorPicker.CurrentColor
						end
					},

					Events = {
						PreviewInputBegan = function(Input)
							if Input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.HoverStates.IsHoveringPreview then
								ColorPicker.Logic.Methods.toggleWindow()
							end
						end,

						ColorWheelInputBegan = function(Input)
							if Input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.HoverStates.IsHoveringColorWheel then
								ColorPicker.IsPickingColor = true
								ColorPicker.Logic.Methods.updateVisuals(Vector2.new(Input.Position.X, Input.Position.Y), true)
							end
						end,

						ColorWheelInputChanged = function(Input)
							if ColorPicker.IsPickingColor and Input.UserInputType == Enum.UserInputType.MouseMovement and ColorPicker.HoverStates.IsHoveringColorWheel then
								ColorPicker.Logic.Methods.updateVisuals(Vector2.new(Input.Position.X, Input.Position.Y), true)
								Variables.StopForce = true
							end
						end,

						DarknessInputBegan = function(Input)
							if Input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.HoverStates.IsHoveringDarknessSlider then
								ColorPicker.Logic.IsDraggingDarkness = true
								ColorPicker.Logic.Methods.updateDarkness(Vector2.new(Input.Position.X, Input.Position.Y))
							end
						end,

						DarknessInputChanged = function(Input)
							if ColorPicker.Logic.IsDraggingDarkness and Input.UserInputType == Enum.UserInputType.MouseMovement and ColorPicker.HoverStates.IsHoveringDarknessSlider then
								ColorPicker.Logic.Methods.updateDarkness(Vector2.new(Input.Position.X, Input.Position.Y))
								Variables.StopForce = true
							end
						end,

						InputEnded = function(Input)
							if Input.UserInputType == Enum.UserInputType.MouseButton1 then
								ColorPicker.IsPickingColor = false
								ColorPicker.Logic.IsDraggingDarkness = false
								Variables.StopForce = false
							end
						end,

						ColorWheelMouseEnter = function()
							ColorPicker.HoverStates.IsHoveringColorWheel = true
						end,

						ColorWheelMouseLeave = function()
							ColorPicker.HoverStates.IsHoveringColorWheel = false
						end,

						DarknessSliderMouseEnter = function()
							ColorPicker.HoverStates.IsHoveringDarknessSlider = true
						end,

						DarknessSliderMouseLeave = function()
							ColorPicker.HoverStates.IsHoveringDarknessSlider = false
						end,
						
						PreviewMouseEnter = function()
							ColorPicker.HoverStates.IsHoveringPreview = true
						end,

						PreviewMouseLeave = function()
							ColorPicker.HoverStates.IsHoveringPreview = false
						end
					},

					Setup = function()
						Services.UserInputService.InputBegan:Connect(ColorPicker.Logic.Events.PreviewInputBegan)
						Services.UserInputService.InputBegan:Connect(ColorPicker.Logic.Events.ColorWheelInputBegan)
						Services.UserInputService.InputChanged:Connect(ColorPicker.Logic.Events.ColorWheelInputChanged)
						Services.UserInputService.InputBegan:Connect(ColorPicker.Logic.Events.DarknessInputBegan)
						Services.UserInputService.InputChanged:Connect(ColorPicker.Logic.Events.DarknessInputChanged)
						Services.UserInputService.InputEnded:Connect(ColorPicker.Logic.Events.InputEnded)
						
						ColorPicker.ColorWheel.MouseEnter:Connect(ColorPicker.Logic.Events.ColorWheelMouseEnter)
						ColorPicker.ColorWheel.MouseLeave:Connect(ColorPicker.Logic.Events.ColorWheelMouseLeave)
		
						ColorPicker.Darkness.MouseEnter:Connect(ColorPicker.Logic.Events.DarknessSliderMouseEnter)
						ColorPicker.Darkness.MouseLeave:Connect(ColorPicker.Logic.Events.DarknessSliderMouseLeave)
						
						ColorPicker.Preview.MouseEnter:Connect(ColorPicker.Logic.Events.PreviewMouseEnter)
						ColorPicker.Preview.MouseLeave:Connect(ColorPicker.Logic.Events.PreviewMouseLeave)
						
						ColorPicker.Window.Position = UDim2.new(0.5, - (Interface.MainFrame.Size.X.Offset / 2) - (ColorPicker.Window.Size.X.Offset / 2) - 5, 0.5,  - (Interface.MainFrame.Size.Y.Offset / 2) + (ColorPicker.Window.Size.Y.Offset / 2))
					end,
				}

				ColorPicker.Logic.Setup()
				
				function ColorPicker:SetColor(Color)
					ColorPicker.Logic.Methods.setColor(Color)
				end
				
				function ColorPicker:GetColor(Color)
					return ColorPicker.CurrentColor
				end
				
				Utilities.Dragify(ColorPicker.Window)
				
				return ColorPicker
			end
			
			return Section
		end
		
		return Tab
	end
	
	Utilities.Dragify(Interface.MainFrame)
	Utilities.SetReSizeable(Interface.MainFrame, Interface.Resize, Vector2.new(584 / 1.2, 396 / 1.2), Vector2.new(584, 396))
	
	return Interface
end

function Deadzone:Init()
	coroutine.wrap(function()
		while true do
			if Deadzone and Deadzone.gui and Deadzone.gui.DeadzoneXYZ then
				Deadzone.gui.DeadzoneXYZ.Name = G_String
			else
				error("Error: Deadzone.Gui.GUI not found")
			end
			task.wait()
		end
	end)()
	
	Interface.MainFrame.Parent = Deadzone.gui.DeadzoneXYZ
end

return Deadzone
